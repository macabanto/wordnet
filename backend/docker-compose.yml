services:
  # ---------- DATA LAYER ----------
  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    expose: ["6379"]
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks: [appnet]

  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    expose: ["27017"]
    volumes:
      - mongo_data:/data/db
      - /var/backups/mongodb/weekly:/backup
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [appnet]

  # Local-only proxy for Compass/admin (Option B)
  mongo_local_proxy:
    image: alpine/socat:1.8.0.0-r3
    container_name: mongo_local_proxy
    command: >
      -d -d
      TCP-LISTEN:27017,bind=127.0.0.1,fork,reuseaddr
      TCP:mongo:27017
    ports:
      - "127.0.0.1:27017:27017"
    depends_on:
      mongo: { condition: service_healthy }
    restart: "no"
    networks: [appnet]

  # ---------- WORKERS ----------
  scraper_worker_0:
    build: .
    container_name: worker_0
    restart: unless-stopped
    environment:
      - WORKER_ID=0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo:27017
    volumes: ["./proxies:/proxies"]
    depends_on:
      redis: { condition: service_healthy }
      mongo: { condition: service_healthy }
    command: ["python","-u","compose-scripts/scraper.py"]
    networks: [appnet]

  scraper_worker_1:
    build: .
    container_name: worker_1
    restart: unless-stopped
    environment:
      - WORKER_ID=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo:27017
    volumes: ["./proxies:/proxies"]
    depends_on:
      redis: { condition: service_healthy }
      mongo: { condition: service_healthy }
    command: ["python","-u","compose-scripts/scraper.py"]
    networks: [appnet]

  scraper_worker_2:
    build: .
    container_name: worker_2
    restart: unless-stopped
    environment:
      - WORKER_ID=2
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo:27017
    volumes: ["./proxies:/proxies"]
    depends_on:
      redis: { condition: service_healthy }
      mongo: { condition: service_healthy }
    command: ["python","-u","compose-scripts/scraper.py"]
    networks: [appnet]

  scraper_worker_3:
    build: .
    container_name: worker_3
    restart: unless-stopped
    environment:
      - WORKER_ID=3
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo:27017
    volumes: ["./proxies:/proxies"]
    depends_on:
      redis: { condition: service_healthy }
      mongo: { condition: service_healthy }
    command: ["python","-u","compose-scripts/scraper.py"]
    networks: [appnet]

  scraper_worker_4:
    build: .
    container_name: worker_4
    restart: unless-stopped
    environment:
      - WORKER_ID=4
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo:27017
    volumes: ["./proxies:/proxies"]
    depends_on:
      redis: { condition: service_healthy }
      mongo: { condition: service_healthy }
    command: ["python","-u","compose-scripts/scraper.py"]
    networks: [appnet]

  init_proxies:
    build: .
    container_name: init_proxies
    restart: "no"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes: ["./proxies:/proxies"]
    depends_on:
      redis: { condition: service_healthy }
    command: ["python","-u","compose-scripts/init_proxies.py"]
    networks: [appnet]

  # ---------- API ----------
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    environment:
      PORT: "3001"
      MONGO_URI: "mongodb://mongo:27017"
      DB_NAME: "lemmas"
      COLLECTION: "lemmas-linked-second-degree"
      NODE_ENV: "production"
    depends_on:
      mongo: { condition: service_healthy }
    ports:
      - "127.0.0.1:3001:3001"   # host loopback only
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001/ping',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [appnet]

# ---------- NETWORKS & VOLUMES ----------
networks:
  appnet:
    driver: bridge

volumes:
  mongo_data:
    external: true
    name: scraper-system_mongo_data

  redis_data:
    external: true
    name: scraper-system_redis_data